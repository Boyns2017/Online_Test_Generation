# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from table_simulator/Pressure.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Pressure(genpy.Message):
  _md5sum = "5906d18d24109eb2a3d96dd40630f985"
  _type = "table_simulator/Pressure"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 hlive
uint8 hstate
uint8 hfinished
uint8 pressure
uint8 c1
uint8 c2
uint8 c3
uint8 c4
uint8 c5
uint8 c6
uint8 c7
uint8 c8
"""
  __slots__ = ['hlive','hstate','hfinished','pressure','c1','c2','c3','c4','c5','c6','c7','c8']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hlive,hstate,hfinished,pressure,c1,c2,c3,c4,c5,c6,c7,c8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pressure, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hlive is None:
        self.hlive = 0
      if self.hstate is None:
        self.hstate = 0
      if self.hfinished is None:
        self.hfinished = 0
      if self.pressure is None:
        self.pressure = 0
      if self.c1 is None:
        self.c1 = 0
      if self.c2 is None:
        self.c2 = 0
      if self.c3 is None:
        self.c3 = 0
      if self.c4 is None:
        self.c4 = 0
      if self.c5 is None:
        self.c5 = 0
      if self.c6 is None:
        self.c6 = 0
      if self.c7 is None:
        self.c7 = 0
      if self.c8 is None:
        self.c8 = 0
    else:
      self.hlive = 0
      self.hstate = 0
      self.hfinished = 0
      self.pressure = 0
      self.c1 = 0
      self.c2 = 0
      self.c3 = 0
      self.c4 = 0
      self.c5 = 0
      self.c6 = 0
      self.c7 = 0
      self.c8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_12B.pack(_x.hlive, _x.hstate, _x.hfinished, _x.pressure, _x.c1, _x.c2, _x.c3, _x.c4, _x.c5, _x.c6, _x.c7, _x.c8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.hlive, _x.hstate, _x.hfinished, _x.pressure, _x.c1, _x.c2, _x.c3, _x.c4, _x.c5, _x.c6, _x.c7, _x.c8,) = _struct_12B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_12B.pack(_x.hlive, _x.hstate, _x.hfinished, _x.pressure, _x.c1, _x.c2, _x.c3, _x.c4, _x.c5, _x.c6, _x.c7, _x.c8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.hlive, _x.hstate, _x.hfinished, _x.pressure, _x.c1, _x.c2, _x.c3, _x.c4, _x.c5, _x.c6, _x.c7, _x.c8,) = _struct_12B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12B = struct.Struct("<12B")
