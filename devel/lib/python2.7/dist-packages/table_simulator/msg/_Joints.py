# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from table_simulator/Joints.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Joints(genpy.Message):
  _md5sum = "56bb714ad6972bde5d4ce4ba5c11d2d1"
  _type = "table_simulator/Joints"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 j1
float32 j2
float32 j3
float32 j4
float32 j5
float32 j6
float32 j7
float32 j8
float32 j9
float32 j10
float32 j11
float32 j12
"""
  __slots__ = ['j1','j2','j3','j4','j5','j6','j7','j8','j9','j10','j11','j12']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Joints, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.j1 is None:
        self.j1 = 0.
      if self.j2 is None:
        self.j2 = 0.
      if self.j3 is None:
        self.j3 = 0.
      if self.j4 is None:
        self.j4 = 0.
      if self.j5 is None:
        self.j5 = 0.
      if self.j6 is None:
        self.j6 = 0.
      if self.j7 is None:
        self.j7 = 0.
      if self.j8 is None:
        self.j8 = 0.
      if self.j9 is None:
        self.j9 = 0.
      if self.j10 is None:
        self.j10 = 0.
      if self.j11 is None:
        self.j11 = 0.
      if self.j12 is None:
        self.j12 = 0.
    else:
      self.j1 = 0.
      self.j2 = 0.
      self.j3 = 0.
      self.j4 = 0.
      self.j5 = 0.
      self.j6 = 0.
      self.j7 = 0.
      self.j8 = 0.
      self.j9 = 0.
      self.j10 = 0.
      self.j11 = 0.
      self.j12 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_12f.pack(_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.j7, _x.j8, _x.j9, _x.j10, _x.j11, _x.j12))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.j7, _x.j8, _x.j9, _x.j10, _x.j11, _x.j12,) = _struct_12f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_12f.pack(_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.j7, _x.j8, _x.j9, _x.j10, _x.j11, _x.j12))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.j7, _x.j8, _x.j9, _x.j10, _x.j11, _x.j12,) = _struct_12f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12f = struct.Struct("<12f")
