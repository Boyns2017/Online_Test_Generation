// Generated by gencpp from file table_simulator/Pressure.msg
// DO NOT EDIT!


#ifndef TABLE_SIMULATOR_MESSAGE_PRESSURE_H
#define TABLE_SIMULATOR_MESSAGE_PRESSURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace table_simulator
{
template <class ContainerAllocator>
struct Pressure_
{
  typedef Pressure_<ContainerAllocator> Type;

  Pressure_()
    : hlive(0)
    , hstate(0)
    , hfinished(0)
    , pressure(0)
    , c1(0)
    , c2(0)
    , c3(0)
    , c4(0)
    , c5(0)
    , c6(0)
    , c7(0)
    , c8(0)  {
    }
  Pressure_(const ContainerAllocator& _alloc)
    : hlive(0)
    , hstate(0)
    , hfinished(0)
    , pressure(0)
    , c1(0)
    , c2(0)
    , c3(0)
    , c4(0)
    , c5(0)
    , c6(0)
    , c7(0)
    , c8(0)  {
  (void)_alloc;
    }



   typedef uint8_t _hlive_type;
  _hlive_type hlive;

   typedef uint8_t _hstate_type;
  _hstate_type hstate;

   typedef uint8_t _hfinished_type;
  _hfinished_type hfinished;

   typedef uint8_t _pressure_type;
  _pressure_type pressure;

   typedef uint8_t _c1_type;
  _c1_type c1;

   typedef uint8_t _c2_type;
  _c2_type c2;

   typedef uint8_t _c3_type;
  _c3_type c3;

   typedef uint8_t _c4_type;
  _c4_type c4;

   typedef uint8_t _c5_type;
  _c5_type c5;

   typedef uint8_t _c6_type;
  _c6_type c6;

   typedef uint8_t _c7_type;
  _c7_type c7;

   typedef uint8_t _c8_type;
  _c8_type c8;




  typedef boost::shared_ptr< ::table_simulator::Pressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::table_simulator::Pressure_<ContainerAllocator> const> ConstPtr;

}; // struct Pressure_

typedef ::table_simulator::Pressure_<std::allocator<void> > Pressure;

typedef boost::shared_ptr< ::table_simulator::Pressure > PressurePtr;
typedef boost::shared_ptr< ::table_simulator::Pressure const> PressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::table_simulator::Pressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::table_simulator::Pressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace table_simulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'table_simulator': ['/home/harrison/catkin_ws/src/table_simulator/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::table_simulator::Pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::table_simulator::Pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::table_simulator::Pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::table_simulator::Pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_simulator::Pressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::table_simulator::Pressure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::table_simulator::Pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5906d18d24109eb2a3d96dd40630f985";
  }

  static const char* value(const ::table_simulator::Pressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5906d18d24109eb2ULL;
  static const uint64_t static_value2 = 0xa3d96dd40630f985ULL;
};

template<class ContainerAllocator>
struct DataType< ::table_simulator::Pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "table_simulator/Pressure";
  }

  static const char* value(const ::table_simulator::Pressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::table_simulator::Pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 hlive\n\
uint8 hstate\n\
uint8 hfinished\n\
uint8 pressure\n\
uint8 c1\n\
uint8 c2\n\
uint8 c3\n\
uint8 c4\n\
uint8 c5\n\
uint8 c6\n\
uint8 c7\n\
uint8 c8\n\
";
  }

  static const char* value(const ::table_simulator::Pressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::table_simulator::Pressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hlive);
      stream.next(m.hstate);
      stream.next(m.hfinished);
      stream.next(m.pressure);
      stream.next(m.c1);
      stream.next(m.c2);
      stream.next(m.c3);
      stream.next(m.c4);
      stream.next(m.c5);
      stream.next(m.c6);
      stream.next(m.c7);
      stream.next(m.c8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Pressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::table_simulator::Pressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::table_simulator::Pressure_<ContainerAllocator>& v)
  {
    s << indent << "hlive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hlive);
    s << indent << "hstate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hstate);
    s << indent << "hfinished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hfinished);
    s << indent << "pressure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pressure);
    s << indent << "c1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c1);
    s << indent << "c2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c2);
    s << indent << "c3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c3);
    s << indent << "c4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c4);
    s << indent << "c5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c5);
    s << indent << "c6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c6);
    s << indent << "c7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c7);
    s << indent << "c8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TABLE_SIMULATOR_MESSAGE_PRESSURE_H
